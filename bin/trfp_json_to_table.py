#!/usr/bin/env python

import sys
import csv
import json
import argparse
import zlib
import pickle
import base64
import pandas as pd

def argparse_setup():
    parser = argparse.ArgumentParser()
    parser.add_argument("-itrfp_json", help="Input-JSON generated by the ThermoRawFileParser XIC")
    parser.add_argument("-iassociations", help="Queries we entered into ThermoRawFileParser (same order)")
    parser.add_argument("-ocsv", help="The Output statistics CSV")

    return parser.parse_args()
if __name__ == "__main__":

    args = argparse_setup()

    # args.itrfp_json = "/home/luxii/Downloads/fsatas/OEI37731stdtest.json"
    # args.iassociations = "/home/luxii/git/Next-QC-Flow/association.txt"
    # args.ocsv = "output_stat.csv"

    json_struct = []
    associations = []
    accessions = dict()

    # Load XICs
    with open(args.itrfp_json, "r") as trfp_in:
        xics = json.load(trfp_in)

    # Load associations
    associations = list()
    with open(args.iassociations, "r") as ass_in:
        for l in ass_in:
            cols = l[:-1].split(",")
            associations.append(cols)

    pass


    # Now create final for this file

    headers_included = []
    final_table = dict()
    headers = [ # Example header for MPCSPIKE1 (old-isa) (Replace XXX with peptide)
        "run_file" ,
        "SPIKE_MPCSPIKE1_MZ_XXX_RT_XXX_intensity"
        "SPIKE_MPCSPIKE1_IDENT_PSMcount",
        "SPIKE_MPCSPIKE1_IDENT_RT",
        "SPIKE_MPCSPIKE1_IDENT_RTdelta",
        "SPIKE_MPCSPIKE1_IDENT_intensity",
    ]

    for ass, xic in zip(associations, xics["Content"]):
        if ass[0] not in headers_included:  # only the first PSM is used. TODO: do we want to change that?
            # If not already included add all information including headers
            final_table[
                "SPIKE_" + ass[0] + "_MZ_" + ass[2] + "_RT_" + ass[3] + "_intensity"
            ] = sum(xic["Intensities"] if xic["Intensities"] else [])

            final_table[
                "SPIKE_" + ass[0] + "_IDENT_PSMcount"
            ] = 0
            
            final_table[
                "SPIKE_" + ass[0] + "_IDENT_RT"
            ] = None

            final_table[
                "SPIKE_" + ass[0] + "_IDENT_RTdelta"
            ] = None

            final_table[
                "SPIKE_" + ass[0] + "_IDENT_intensity"
            ] = None

            headers_included.append(ass[0])
        else:
            # Count the PSMs matching to the sequence of the spike-in peptide:
            final_table[
                "SPIKE_" + ass[0] + "_IDENT_PSMcount"
            ] += 1

            # Retrieve the info from previous associations (retention time and intensity of identifications)
            for ass_ass in associations:
                if ass_ass[0] == ass[0]:
                    ### retention time of first matching PSM
                    final_table[
                        "SPIKE_" + ass[0] + "_IDENT_RT"
                    ] = float(ass[3])
                    
                    ### difference between found ans expected retention time
                    final_table[
                        "SPIKE_" + ass[0] + "_IDENT_RTdelta"
                    ] = (float(ass[3]) - float(ass_ass[3]))  # Subtract found_rt by expected_rt

                    ### intensity of PSM
                    final_table[
                        "SPIKE_" + ass[0] + "_IDENT_intensity"
                    ] = sum(xic["Intensities"] if xic["Intensities"] else [])
                    break

    # pickle the final table and create a dataframe with only one column and one line
    final_table_pickled = base64.b64encode(zlib.compress(pickle.dumps(final_table), level=9)).decode("utf-8")
    final_table_pickled = {'MPCSPIKEINS_____pickle_zlib': final_table_pickled}
    final_table_pickled = pd.DataFrame(final_table_pickled, index=[0])


    final_table_pickled.to_csv(args.ocsv, index = False)


    #with open(args.ocsv, "w") as final_output:
    #    writer = csv.DictWriter(final_output, fieldnames=final_table.keys())

    #   writer.writeheader()
    #    writer.writerow(final_table)
    pass

